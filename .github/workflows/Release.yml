name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  BUILD_TYPE: Release

permissions:
  contents: write
  
jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up CMake
      uses: lukka/get-cmake@latest

    - name: Install Dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get install -y --no-install-recommends rpm build-essential git make pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev 

    # - name: Install Dependencies (macOS)
    #   if: matrix.os == 'macos-latest'
    #   run: |
    #     brew install freeglut

    - name: Install Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install nsis.install
    
    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DSDL_STATIC=ON 

    - name: Build
      run: cmake --build build --config ${{env.BUILD_TYPE}} -j 8

    - name: CPack (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd build && cpack -G "DEB;RPM;ZIP;TGZ"

    - name: CPack (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd build && cpack -G "NSIS;ZIP"

    - name: CPack (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd build && cpack -G "DragNDrop;ZIP;TGZ"

    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        files: ${{github.workspace}}/build/Garage-*
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
