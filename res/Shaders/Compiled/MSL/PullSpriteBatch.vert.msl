#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct SpriteData
{
    packed_float3 Position;
    float Size;
    float4 Color;
    float Rotation;
    char _m0_final_padding[12];
};

struct type_StructuredBuffer_SpriteData
{
    SpriteData _m0[1];
};

struct type_UniformBlock
{
    float4x4 ViewProjectionMatrix;
};

constant spvUnsafeArray<float2, 3> _42 = spvUnsafeArray<float2, 3>({ float2(-0.5, -1.0), float2(0.5, -1.0), float2(0.0, 1.0) });

struct main0_out
{
    float4 out_var_TEXCOORD0 [[user(locn0)]];
    float4 gl_Position [[position]];
};

vertex main0_out main0(constant type_UniformBlock& UniformBlock [[buffer(0)]], const device type_StructuredBuffer_SpriteData& DataBuffer [[buffer(1)]], uint gl_VertexIndex [[vertex_id]])
{
    main0_out out = {};
    uint _45 = gl_VertexIndex / 3u;
    float _53 = cos(DataBuffer._m0[_45].Rotation);
    float _54 = sin(DataBuffer._m0[_45].Rotation);
    out.out_var_TEXCOORD0 = DataBuffer._m0[_45].Color;
    out.gl_Position = UniformBlock.ViewProjectionMatrix * float4((float2x2(float2(_53, _54), float2(-_54, _53)) * (_42[gl_VertexIndex % 3u] * DataBuffer._m0[_45].Size)) + float2(DataBuffer._m0[_45].Position[0], DataBuffer._m0[_45].Position[1]), DataBuffer._m0[_45].Position[2], 1.0);
    return out;
}

