#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct CircleData
{
    float2 Position;
    float Radius;
    float _padding;
    float4 Color;
};

struct type_StructuredBuffer_CircleData
{
    CircleData _m0[1];
};

struct type_UniformBlock
{
    float4x4 ViewProjectionMatrix;
};

constant spvUnsafeArray<float2, 4> _39 = spvUnsafeArray<float2, 4>({ float2(-1.0), float2(1.0, -1.0), float2(-1.0, 1.0), float2(1.0) });

struct main0_out
{
    float4 out_var_TEXCOORD0 [[user(locn0)]];
    float2 out_var_TEXCOORD1 [[user(locn1)]];
    float4 gl_Position [[position]];
};

vertex main0_out main0(constant type_UniformBlock& UniformBlock [[buffer(0)]], const device type_StructuredBuffer_CircleData& DataBuffer [[buffer(1)]], uint gl_VertexIndex [[vertex_id]], uint gl_InstanceIndex [[instance_id]])
{
    main0_out out = {};
    float4 _61 = UniformBlock.ViewProjectionMatrix * float4(DataBuffer._m0[gl_InstanceIndex].Position, 0.0, 1.0);
    out.out_var_TEXCOORD0 = DataBuffer._m0[gl_InstanceIndex].Color;
    out.out_var_TEXCOORD1 = _39[gl_VertexIndex];
    out.gl_Position = (_61 + (((UniformBlock.ViewProjectionMatrix * float4(DataBuffer._m0[gl_InstanceIndex].Position + float2(DataBuffer._m0[gl_InstanceIndex].Radius, 0.0), 0.0, 1.0)) - _61) * _39[gl_VertexIndex].x)) + (((UniformBlock.ViewProjectionMatrix * float4(DataBuffer._m0[gl_InstanceIndex].Position + float2(0.0, DataBuffer._m0[gl_InstanceIndex].Radius), 0.0, 1.0)) - _61) * _39[gl_VertexIndex].y);
    return out;
}

